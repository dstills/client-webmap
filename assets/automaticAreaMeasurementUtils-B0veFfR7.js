import{U as i,j as h,g}from"./euclideanAreaMeasurementUtils-B2sCgpMm.js";import{qe as q,eK as $,eL as y,g as b}from"./index-D2dWKXoe.js";import{a as s}from"./quantityUtils-D4B7S4Ay.js";import{geodesicArea as d}from"./geometryEngine-Bmlaqucx.js";import{y as m}from"./geodesicUtils-0BUrW_mO.js";import{t as M}from"./geodesicMeasurementUtils-DzAxKO3X.js";function R({hasZ:r,spatialReference:t,rings:n},o,u=0){const a=q(t);if(a==null)return!1;const p=r?e=>e:e=>$(G,e[0],e[1],u);for(const e of n){const c=[];for(const l of e){const f=[0,0,u];a(p(l),0,f,0),c.push(f)}o.push(c)}return!0}const G=y();function j(r){const{spatialReference:t}=r;return M(t,k,x,A,r)}function k(r){return s(Math.abs(m([r],"square-meters")[0]),"square-meters")}function x(r){try{return s(Math.abs(d(r,"square-meters")),"square-meters")}catch{return null}}function A(r){const t=[];return R(r,t)?s(Math.abs(m([{type:"polygon",rings:t,spatialReference:b.WGS84}],"square-meters")[0]),"square-meters"):null}function K(r,t,n=i()){if(t==="on-the-ground"){const o=j(r);return o??h(r,n)}return g(r,n)}function w(r,t=i()){return K(r,"on-the-ground",t)}export{w as u};
