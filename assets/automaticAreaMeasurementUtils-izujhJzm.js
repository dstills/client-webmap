import{U as i,j as h,g}from"./euclideanAreaMeasurementUtils-5l6rCxRx.js";import{qd as q,eM as $,eN as d,g as y}from"./index-BS4ejk0L.js";import{a as s}from"./quantityUtils-b7cV58jp.js";import{geodesicArea as M}from"./geometryEngine-C5wCr2lg.js";import{y as m}from"./geodesicUtils-CnTg9Ebr.js";import{t as b}from"./geodesicMeasurementUtils-C9DYvYv0.js";function R({hasZ:r,spatialReference:t,rings:e},o,u=0){const a=q(t);if(a==null)return!1;const p=r?n=>n:n=>$(G,n[0],n[1],u);for(const n of e){const c=[];for(const l of n){const f=[0,0,u];a(p(l),0,f,0),c.push(f)}o.push(c)}return!0}const G=d();function j(r){const{spatialReference:t}=r;return b(t,k,x,A,r)}function k(r){return s(Math.abs(m([r],"square-meters")[0]),"square-meters")}function x(r){try{return s(Math.abs(M(r,"square-meters")),"square-meters")}catch{return null}}function A(r){const t=[];return R(r,t)?s(Math.abs(m([{type:"polygon",rings:t,spatialReference:y.WGS84}],"square-meters")[0]),"square-meters"):null}function N(r,t,e=i()){if(t==="on-the-ground"){const o=j(r);return o??h(r,e)}return g(r,e)}function z(r,t=i()){return N(r,"on-the-ground",t)}export{z as u};
