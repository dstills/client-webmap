import{jl as w,jK as I,jn as $,g_ as T,g$ as O,h0 as E,h1 as M,jm as R,jL as L,jM as P,bR as F,eW as v,jv as f,jN as x,fK as N,jO as U,jP as J,bE as b,bK as q,bL as _,jx as A,jQ as k,D as S,ay as K,g as i,y as n,jR as j,h6 as V,eN as z,h8 as D,i as W,bh as Z,jS as B}from"./index-nBWeBKPv.js";import{m as C,f as G,Y as H}from"./SublayersOwner-Bs-3-bUv.js";import{t as Q}from"./imageBitmapUtils-ZWW539JY.js";import"./QueryTask-B9fRlzjN.js";import"./executeForIds-BY_LMuyR.js";import"./query-DRwR4uHa.js";import"./pbfQueryUtils-Cp4O6AeF.js";import"./pbf-9dqbeZu4.js";import"./executeQueryJSON-D0F5yCyp.js";import"./executeQueryPBF-BxIYsLLw.js";let r=class extends w(I($(C(G(T(O(E(M(R(L(P(Z)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(F).then(()=>this._fetchService(s))),Promise.resolve(this)}readImageFormat(e,s){const p=s.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,s,p,t){var d,h,y;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let l=!1;if((d=this.capabilities)!=null&&d.operations.supportsExportMap&&((y=(h=this.capabilities)==null?void 0:h.exportMap)!=null&&y.supportsDynamicLayers)){const o=v(t.origin);if(o===f.PORTAL_ITEM){const g=this.createSublayersForOrigin("service").sublayers;l=x(a,g,f.SERVICE)}else if(o>f.PORTAL_ITEM){const g=this.createSublayersForOrigin("portal-item");l=x(a,g.sublayers,v(g.origin))}}const m=[],u={writeSublayerStructure:l,...t};let c=l;a.forEach(o=>{const g=o.write({},u);m.push(g),c=c||o.originOf("visible")==="user"}),m.some(o=>Object.keys(o).length>1)&&(s.layers=m),c&&(s.visibleLayers=a.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,s,p,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new N({layer:this,floors:t==null?void 0:t.floors,scale:U({extent:e,width:s})*a}),m=l.toJSON();l.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,d=J(c);m.dpi*=a;const h={};if(t!=null&&t.timeExtent){const{start:y,end:o}=t.timeExtent.toJSON();h.time=y&&o&&y===o?""+y:`${y??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:s+","+p,...m,...u,...h}}async fetchImage(e,s,p,t){const{data:a}=await this._fetchImage("image",e,s,p,t);return a}async fetchImageBitmap(e,s,p,t){const{data:a,url:l}=await this._fetchImage("blob",e,s,p,t);return Q(a,l,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const s={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await b(this.url,s),{extent:t,fullExtent:a,timeExtent:l}=p,m=t||a;return{fullExtent:m&&q.fromJSON(m),timeExtent:l&&_.fromJSON({start:l[0],end:l[1]})}}loadAll(){return A(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,s,p,t,a){var u,c,d;const l={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(s,p,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((u=l.query)==null?void 0:u.dynamicLayers)!=null&&!((d=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&d.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:h}=await b(m,l);return{data:h,url:m}}catch(h){throw K(h)?h:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:s,ssl:p}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=s,this.read(s,{origin:"service",url:this.parsedUrl})}};i([n(j("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),i([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),i([n()],r.prototype,"dpi",void 0),i([n()],r.prototype,"gdbVersion",void 0),i([n()],r.prototype,"imageFormat",void 0),i([V("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),i([n()],r.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),i([n(j("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),i([n()],r.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),i([z("sublayers",{layers:{type:[H]},visibleLayers:{type:[B]}})],r.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),i([n(D)],r.prototype,"url",void 0),r=i([W("esri.layers.MapImageLayer")],r);const le=r;export{le as default};
