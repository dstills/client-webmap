import{dn as I,iA as T,dp as $,gR as E,gS as M,gT as O,gU as F,ih as R,iB as L,iC as P,aQ as U,d_ as v,is as f,iD as x,dk as j,iE as J,iF as N,aB as b,aL as _,aM as q,iu as A,iG as k,b as S,bs as B,E as s,F as n,iH as w,du as V,dv as z,g_ as C,J as D,bx as G,iI as H}from"./index-BS4ejk0L.js";import{m as Z,f as K,Y as W}from"./SublayersOwner-D6WBFqdl.js";import{t as Q}from"./imageBitmapUtils-tAu21qU0.js";import"./QueryTask-DOuqksS6.js";import"./infoFor3D-CxOdoily.js";import"./executeForIds-BK087Coi.js";import"./query-B5HIkOqR.js";import"./pbfQueryUtils-B-d_6UUW.js";import"./pbf-C4Eb1fn3.js";import"./executeQueryJSON-D1G5ha9E.js";import"./executeQueryPBF-BHFBB6fi.js";let r=class extends I(T($(Z(K(E(M(O(F(R(L(P(G)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(U).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const p=i.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,p,t){var h,d,u;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let l=!1;if((h=this.capabilities)!=null&&h.operations.supportsExportMap&&((u=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&u.supportsDynamicLayers)){const o=v(t.origin);if(o===f.PORTAL_ITEM){const g=this.createSublayersForOrigin("service").sublayers;l=x(a,g,f.SERVICE)}else if(o>f.PORTAL_ITEM){const g=this.createSublayersForOrigin("portal-item");l=x(a,g.sublayers,v(g.origin))}}const m=[],y={writeSublayerStructure:l,...t};let c=l;a.forEach(o=>{const g=o.write({},y);m.push(g),c=c||o.originOf("visible")==="user"}),m.some(o=>Object.keys(o).length>1)&&(i.layers=m),c&&(i.visibleLayers=a.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,i,p,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new j({layer:this,floors:t==null?void 0:t.floors,scale:J({extent:e,width:i})*a}),m=l.toJSON();l.destroy();const y=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,h=N(c);m.dpi*=a;const d={};if(t!=null&&t.timeExtent){const{start:u,end:o}=t.timeExtent.toJSON();d.time=u&&o&&u===o?""+u:`${u??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+p,...m,...y,...d}}async fetchImage(e,i,p,t){const{data:a}=await this._fetchImage("image",e,i,p,t);return a}async fetchImageBitmap(e,i,p,t){const{data:a,url:l}=await this._fetchImage("blob",e,i,p,t);return Q(a,l,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await b(this.url,i),{extent:t,fullExtent:a,timeExtent:l}=p,m=t||a;return{fullExtent:m&&_.fromJSON(m),timeExtent:l&&q.fromJSON({start:l[0],end:l[1]})}}loadAll(){return A(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,i,p,t,a){var y,c,h;const l={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,p,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((y=l.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&h.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:d}=await b(m,l);return{data:d,url:m}}catch(d){throw B(d)?d:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:p}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([n(w("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([n()],r.prototype,"dpi",void 0),s([n()],r.prototype,"gdbVersion",void 0),s([n()],r.prototype,"imageFormat",void 0),s([V("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([n()],r.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([n(w("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([n()],r.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([z("sublayers",{layers:{type:[W]},visibleLayers:{type:[H]}})],r.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([n(C)],r.prototype,"url",void 0),r=s([D("esri.layers.MapImageLayer")],r);const pe=r;export{pe as default};
