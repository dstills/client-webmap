import{H as S,g as p,eL as l,eK as W,eT as x,eU as j,eV as q,eW as T,eX as G,eY as m,eZ as b,e_ as w,e$ as g,f0 as h,eJ as d,eI as k,f1 as z}from"./index-D2dWKXoe.js";import{geodesicArea as E}from"./geometryEngine-Bmlaqucx.js";import{j as M,z as P}from"./geodesicUtils-0BUrW_mO.js";function v(t,e){const n=z(e);W(n,0,0,0);for(let r=0;r<t.length;++r)x(n,n,t[r]);j(n,n,1/t.length);let a=0;for(let r=0;r<t.length;++r)a=Math.max(a,q(n,t[r]));e[3]=Math.sqrt(a)}function y(t,e){if(t.length<3)throw new Error("need at least 3 points to fit a plane");T(t[0],t[1],t[2],e)}function A(t,e){return G(t,e)+t[3]}function C(t,e,n){return m(t,i,n)&&m(e,u,n)?b(i,u):0}function H(t,e){if(!w(t,i)||!w(e,u))return 0;const n=new P;return M(n,[i[0],i[1]],[u[0],u[1]],p.WGS84),n.distance}function I(t,e,n){const a=new P;return M(a,[t[0],t[1]],[e[0],e[1]],n??p.WGS84),a.distance}function J(t,e,n,a){const r=L;return g(t,a,i)&&g(e,a,u)&&g(n,a,$)?(r.setPoint(0,0,i),r.setPoint(0,1,u),r.setPoint(0,2,$),Math.abs(E(r,"square-meters"))):0}function K(t,e=null,n=!0){const r=(o,f)=>{if(f[0]===0&&f[1]===0&&f[2]===0)return!1;for(let c=0;c<o.length;++c)if(G(f,o[c])<-1e-6)return!1;return!0};if(t.length===0)return!1;if(t.length===1)return e&&h(e,t[0]),!0;W(s,0,0,0);for(let o=0;o<t.length;++o)x(s,s,t[o]);if(d(s,s),r(t,s))return e&&h(e,s),!0;if(!n)return!1;for(let o=0;o<t.length;++o)for(let f=0;f<t.length;++f)if(o!==f&&(k(s,t[o],t[f]),d(s,s),r(t,s)))return e&&h(e,s),!0;return!1}function R(t){return t.pointerType!=="mouse"||t.button===0}const i=l(),u=l(),$=l(),L=new S({rings:[[i,u,$]],spatialReference:p.WGS84}),s=l();export{A as G,I as L,v as S,J as T,C as W,H as d,K as k,R as q,y as w};
